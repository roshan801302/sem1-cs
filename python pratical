pratical 1


import cmath  
def find_roots(a, b, c):
    # Calculate the discriminant (b^2 - 4ac)
    discriminant = b**2 - 4*a*c
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
    return root1, root2
def main():
    print("Enter the coefficients of the quadratic equation ax^2 + bx + c = 0")
    a = float(input("Enter coefficient a: "))
    b = float(input("Enter coefficient b: "))
    c = float(input("Enter coefficient c: "))
    if a = 0
    if a == 0:
        print("This is not a quadratic equation because 'a' cannot be zero.")
    else:
        root1, root2 = find_roots(a, b, c)
        print(f"The roots of the quadratic equation are: {root1} and {root2}")




#####end




pratical 2




def is_prime(num):
    """Check if a number is prime."""
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def generate_primes_up_to_n(n):
    """Generate all prime numbers up to n."""
    primes = []
    for num in range(2, n + 1):
        if is_prime(num):
            primes.append(num)
    return primes

def generate_first_n_primes(n):
    """Generate the first n prime numbers."""
    primes = []
    num = 2  # Starting number
    while len(primes) < n:
        if is_prime(num):
            primes.append(num)
        num += 1
    return primes

def main():
    n = int(input("Enter a number: "))
    if is_prime(n):
        print(f"{n} is a prime number.")
    else:
        print(f"{n} is not a prime number.")
    primes_up_to_n = generate_primes_up_to_n(n)
    print(f"Prime numbers up to {n}: {primes_up_to_n}")
    
    # 3. Generate the first 'n' prime numbers
    first_n_primes = generate_first_n_primes(n)
    print(f"The first {n} prime numbers: {first_n_primes}")

if __name__ == "__main__":
    main()

